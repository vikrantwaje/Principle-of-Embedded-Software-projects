 /*-----------------------------------------------------------------------------------------------------------------------------------*/
 /* 0.Documentation section
  -----------------------------------------------------------------------------------------------------------------------------------

  @file-uart.h

 @brief:This file includes various uart specific operations which are triggered by interrupts

 @author: Vikrant Waje and Kiran Hegde

 @date:26 October 2017


 */
/*--------------------------------------------------------------------------------------------------------------------------------*/
/*
  @file-uart.c

 @brief:This file includes various uart specific operations which are triggered by interrupts

 @author: Vikrant Waje and Kiran Hegde

 @date:28 November 2017


 */
/*-----------------------------------------------------------------------------------------------------------------------------*/

/*Guard section*/

#ifndef INCLUDES_UART_H_
#define INCLUDES_UART_H_
/*----------------------------------------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------------------------------------------------------------*/
#include "cb.h"
#define baud 38400//Set baud rate to 38400
#define END_CRITICAL() __enable_irq();
#define START_CRITICAL()   __disable_irq();
/*-------------------------------------------------------------------------------------------------*/
/* Global declaration. Variables are used both in project2.c and uart.c */
//extern uint32_t end,elapsed;
extern uint8_t ki;//, overflow;
extern uint8_t *pointer;
extern CB_t *tx;
extern CB_t *rx;
extern uint8_t  *loc;
extern uint8_t c;
extern uint8_t tik;
extern uint8_t f;
extern uint8_t alphacount;
extern uint8_t numericcount, punctuationcount;
extern uint8_t count;
extern uint8_t b;
extern uint8_t *receive;
extern uint8_t s1;
extern uint8_t s2;
extern uint8_t e;
extern uint8_t *receivea;
extern uint8_t logging_enable;
/*----------------------------------------------------------------------------------------------------------*/

/*Function declaration*/
/*---------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: Integer to ascii conversion

  Given a integer , convert it into its respective ascii value

 @param: Integer number to be converted, pointer to store the result, base to which the integer is to be converted


 @return: Pointer to result
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
uint8_t* my_itoa(uint8_t num,uint8_t *str, uint8_t base);

/*-------------------------------------------------------------------------------------------------------------------------------------------------------*/
 /*
  @brief: To configure UART

  Configure the UART by setting its appropriate register

 @param: None


 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
void UART_configure();

/*---------------------------------------------------------------------------------------------------------------------------*/

/*
  @brief: To configure RTC

  Configure the RTC by setting its appropriate register

 @param: None


 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
void RTC_init();
/*----------------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: UART IRQ handler

  Contains transmit and receive interrupt which gets triggered when UART_D register is full or empty

 @param: None


 @return: None

/*-------------------------------------------------------------------------------------------------------------------------------------*/
void RTC_Seconds_IRQHandler();
/*---------------------------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: UART IRQ handler

  Contains transmit and receive interrupt which gets triggered when UART_D register is full or empty

 @param: None


 @return: None
 */
/*-------------------------------------------------------------------------------------------------------------------------------*/
void UART0_IRQHandler();
/*--------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: Send a single character from UART_D register to circular buffer

  This basically allows the value entered on putty/teraterm to get added into circular buffer

 @param: pointer to data that is to be sent


 @return: status whether transmit interrupt is activated
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
uint8_t UART_send(uint8_t *poin);
/*--------------------------------------------------------------------------------------------------------------------------------*/

/*
  @brief: Receives data into memory location from UART0_D

  Given a value to putty/teraterm, it gets loaded into circular buffer from UART0_D if it gets full

 @param: pointer to location where value from UART0_D is to be stored.


 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
uint8_t UART_receive(uint8_t *loc);
/*-----------------------------------------------------------------------------------------------------------------------------------*/

/*
  @brief: Sends  a string of given length

  Given a string of specific length, it gets sent

 @param: Pointer to location which contains the string to be passed and length of the string


 @return: Returns status
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
uint8_t log_data(uint8_t *loc, uint8_t n);
/*--------------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: Send string

  Given a string of data, it usually sends each of character to circular buffer

 @param: pointer to data string which is to be sent


 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
void log_string(uint8_t *loc);
/*--------------------------------------------------------------------------------------------------------------------------------*/

/*
  @brief: Receive a string from memory location which is stored in UART0_D register

  Given a string, the string is loaded into UART0_D register

 @param: Pointer to location from where string is input, length of string


 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/

uint8_t UART_receive_n(uint8_t *loc, uint8_t n);
/*--------------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: Converts a given number into its ASCII equivalent

  Function that performs integer to ascii conversion

 @param: Number that is to be converted into its ascii equivalent form


 @return: None
 */
/*------------------------------------------------------------------------------------------------------------------------------------*/
uint8_t log_integer(uint8_t num);
/*--------------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: Flushes the data which is present in the buffer

  Removes all the items from buffer

 @param: None


 @return: None
 */
/*------------------------------------------------------------------------------------------------------------------------------------*/
void log_flush();
/*-------------------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: Copies the content from set of memory location to another

  Copies content from source location to destination location of given length

 @param: Pointer to source
 @param: Pointer to destination
 @param: length of block which is to bve transferred


 @return: Pointer to source location
 /*------------------------------------------------------------------------------------------------------------------------------*/
uint8_t* my_memcpy(uint8_t *src,uint8_t *dst,size_t length);
/*---------------------------------------------------------------------------------------------------------------------------------*/
/*
@brief: Adds item into the buffer

Given a buffer, add items into it(the enum values)

@param: Pointer to particular log
@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/
void log_item(uint8_t *logptr);
/*---------------------------------------------------------------------------------------------------------------------------------*/
/*
@brief: Logs when logger buffer gets initialised

Displays a log message on putty when logger buffer gets initialised

@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/
#ifdef logging
void LOGGER_INITIALISED();
#else
;
#endif
/*---------------------------------------------------------------------------------------------------------------------------------*/
/*
@brief: Logs when GPIO gets initialised

Displays a log message on putty when GPIO gets initialised

@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/
void GPIO_INITIALIZATION();
/*---------------------------------------------------------------------------------------------------------------------------------*/
/*
@brief: Logs when System gets initialised

Displays a log message on putty when System gets initialised

@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/
void SYSTEM_INITIALISED();
/*---------------------------------------------------------------------------------------------------------------------------------*/
/*
@brief: Logs when profiling starts

Displays a log message on putty when profiling starts

@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/
void PROFILING_STARTED();
/*---------------------------------------------------------------------------------------------------------------------------------*/
/*
@brief: Logs when profiling gets completed

Displays a log message on putty when profiling gets completed

@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/
void PROFILING_COMPLETED();
/*---------------------------------------------------------------------------------------------------------------------------------*/
/*
@brief: Logs when profiling result is calculated

Displays a log message on putty when profiling result gets calculated

@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/
void PROFILING_RESULT();
/*---------------------------------------------------------------------------------------------------------------------------------*/
/*
@brief: Logs when data analysis is started

Displays a log message on putty when data analysis starts

@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/
void DATA_ANALYSIS_STARTED();
/*---------------------------------------------------------------------------------------------------------------------------------*/
/*
@brief: Logs when alphabetic count is computed

Displays a log message on putty when alphabetic count is computed

@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/
void DATA_ALPHA_COUNT();
/*---------------------------------------------------------------------------------------------------------------------------------*/
/*
@brief: Logs when numeric count is computed

Displays a log message on putty when numeric count is calculated

@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/
void DATA_NUMERIC_COUNT();
/*---------------------------------------------------------------------------------------------------------------------------------*/
/*
@brief: Logs when punctuation count is computed

Displays a log message on putty when punctuation count is computed

@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/
void DATA_PUNCTUATION_COUNT();
/*---------------------------------------------------------------------------------------------------------------------------------*/
/*
@brief: Logs when data analysis gets completed

Displays a log message on putty when data analysis gets completed

@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/
void DATA_ANALYSIS_COMPLETED();
#endif /* INCLUDES_UART_H_ */

////////////////////////////////////////////////////////////////////////////////
// EOF
////////////////////////////////////////////////////////////////////////////////
