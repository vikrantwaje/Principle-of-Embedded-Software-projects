/*
 * Copyright (c) 2015, Freescale Semiconductor, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "MKL25Z4.h"

void DMA0_IRQHandler(){

int I=0;


}

void DMA_init(){

	SIM_SOPT2|=0X00010000; // Select PLL/2
	SIM_SCGC6 |= (1<<1); //Enable clock to DMA mux(bit 1)

	SIM_SCGC7=0X00000100; //Enable clock to DMA module

	/*-------------------------------------------*/
	//Set control register
	DMA_DCR0=(1<<31);//Enable interrupt on complete
	DMA_DCR0|=(1<<22); // Increments source address on each transfer of data(depends on size)
	DMA_DCR0|=(1<<19); // Increments destination address after transfer is complete(depends on size)
	DMA_DCR0|=DMA_DCR_SSIZE(1);// 8 bit size(bit 20-21)
	DMA_DCR0|=DMA_DCR_DSIZE(1);// 8 bit size(bit 17-18)


	/*--------------------------------------------*/

	DMA_SAR0=0X00000000; //Set source address()
	DMA_DAR0=0X20000000 ;//Set Destination address()
	DMA_DSR_BCR0=10; //No. of bytes to be transferred
	DMA_DSR_BCR0 &=~(0x01000000); // Clear DONE bit in BCR0(BIT 24)
    DMA_DCR0|=0x00010000; // Start transfer by setting start bit(bit 16)


}

void main(){

SystemCoreClockUpdate();
DMA_init();


}
////////////////////////////////////////////////////////////////////////////////
// EOF
////////////////////////////////////////////////////////////////////////////////
