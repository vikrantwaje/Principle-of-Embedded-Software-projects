/*
 * Copyright (c) 2015, Freescale Semiconductor, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 /*-----------------------------------------------------------------------------------------------------------------------------------*/
 /* 0.Documentation section
  -----------------------------------------------------------------------------------------------------------------------------------

  @file-uart.c

 @brief:This file includes various uart specific operations which are triggered by interrupts

 @author: Vikrant Waje and Kiran Hegde

 @date:28 November 2017


 */
/*--------------------------------------------------------------------------------------------------------------------------------*/
/*1. Preprocessor Directives*/


#include "MKL25Z4.h"
#include<stdint.h>
#include<stdio.h>
#include<stdlib.h>
#include"uart.h"
#include"cb.h"

#define LOGGING
/*-------------------------------------------------------------------------------------------------------------------------------*/

uint32_t seconds;
/*---------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: Integer to ascii conversion

  Given a integer , convert it into its respective ascii value

 @param: Integer number to be converted, pointer to store the result, base to which the integer is to be converted


 @return: Pointer to result
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
uint8_t* my_itoa(uint8_t num,uint8_t *str, uint8_t base)
{
    int i =0, l=0;
    if (num == 0)
    {
        *str++ = '0';
        *str++ = '\0';
        *str = '\0';
        return str;
    }
    while (num != 0)
    {
        int rem = num % base;
        *str++ = (rem > 9)? (rem-10) + 'a' : rem + '0';
        num = num/base; l++;
    }
    *str = '\0';
    str=str-(l+1);
    uint8_t t;
    i=1; int j=l;
    while(i<j) // condition for swapping
    {
        t= *(str+i);
        *(str+i)=*(str+j);
        *(str+j)=t;
        i++;
        j--;
     }
      return str; //return length(l) of final ascii string.
 }
/*-------------------------------------------------------------------------------------------------------------------------------------------------------*/
 /*
  @brief: To configure UART

  Configure the UART by setting its appropriate register

 @param: None


 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
void UART_configure()
{
	uint16_t baud_divisor;
	SIM_SCGC4 |= 0x00000400;            // enable clock for UART(10th bit in SCGC5)
	SIM_SOPT2 |= 0x04000000;            // use FLL output for UART(Bit 27th and 26th)
	UART0_C2 &= 0XF3;              // Disable transmit and receive pin(Bit 2nd and Bit 3rd of C2)
	/*---------------------BAUD RATE-----------------------------------------------*/

	/* BAUD RATE=(SYSTEM CLOCK)/((OSR+1)*SBR)
	 * ASSUME THAT WE WANT BAUD RATE TO 38400
	 * SYSTEM CLOCK =20.9MHz
	 * OSR=3
	 * SBR=312
	 * BAUD RATE WITH ABOVE VALUES WILL COME OUT TO 38467.5 WHICH IS CLOSE TO OUR REQUIRED BAUD RATE THAT IS 38400
	 *
	 */
	baud_divisor= (uint16_t)(DEFAULT_SYSTEM_CLOCK/(baud *16));// Get the value of SBR to be loaded into BDH and BDL register
	UART0_BDH |= (baud_divisor >> 8) & 0x1F; //ANDED with 0x1F because BDH lies from Bit 0 Bit 4
	UART0_BDL = (baud_divisor & 0XFF);	//ANDED with 0xFF because BDL lies from bit 0 to bit 7
	//UART0_BDH = 0x00;             // Select BAUD rate as 38400(Bit 0 to bit 4 of BDH)
	//UART0_BDL = 0x22;            // Select BAUD rate as 38400(Bit 0 to Bit 7 of BDL)
	UART0_C4 = 0x0F;              // Over Sampling Ratio 16(Set OSR to 15)
	UART0_C1 = 0x00000000;              // Select 8-bit mode
	UART0_C2 |= 0X2C;              // enable transmit and receive pins(Bit 2nd and Bit 3rd of C2)
    SIM_SCGC5 |= 0x00000200;            // enable clock for PORTA(Bit 9th in SCGC5)
    PORTA_PCR1 = 0x00000200;            // Select PTA1 as Receive pin
    PORTA_PCR2 = 0x00000200;            // Select PTA2 as Transmit pin


	/*-----------------------------ENABLING INTERRUPT-------------------------------------*/

	NVIC->ISER[0]=0X00001000;//ENABLE INTERRUPT WHICH IS BIT 12 IN ISER REGISTER(IRQ 12 CORRESPONDS TO UART0 INTERRUPT)*/
	LOGGER_INITIALISED();
}
/*---------------------------------------------------------------------------------------------------------------------------*/

/*
  @brief: To configure RTC

  Configure the RTC by setting its appropriate register

 @param: None


 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
void RTC_init(){
			SIM_SCGC5|=(1<<11);//Enable clock to PORTC(We are shorting PC3 and PC1)
			MCG_C1 |= (1<<1); //Enable internal reference clock(Bit 1=1)
			MCG_C2 &= ~(1<<0);  //Internal Reference Clock -->Slow(Bit 0=0)

			//**RTC_CLKIN**//
			PORTC_PCR1 |= (1<<8);       //PTC1 as RTC_CLKIN(Bit 8)
			SIM_SOPT1 |= (1<<19);  //32 Khz clock source for RTC(bit19=1,bit 18=0)

			SIM_SOPT1&=~(1<<18);

			//**32KHz Frequency**//
			//Clockout pin --> 32 KHz(BIT 7,BIT6,BIT 5 SHOULD BE 100)
			SIM_SOPT2 |= (1<<7);
			SIM_SOPT2 &= ~(1<<6);
			SIM_SOPT2 &= ~(1<<5);

			//PTC3 as CLKOUT(BIT10,BIT9,BIT8 SHOULD BE 101)

			PORTC_PCR3 |= (1<<10)|(1<<8);
			PORTC_PCR3&=~(1<<9);

		    /*enable the clock to SRTC module register space*/
			SIM_SCGC6 |= (1<<29);//(BIT 29=1)

			/*Clear Registers*/
		    RTC_CR  = (1<<0);//Software reset
		    RTC_CR  &= ~(1<<0);

		    //Checking for time invalid flag(Bit 1)
		    if (RTC_SR & 0X00000001){
		        RTC_TSR = 0x00000000;   //  this action clears the TIF
		    }

		    /*Set time compensation parameters*/
		   // RTC_TCR = RTC_TCR_CIR(1) | RTC_TCR_TCR(0xFF);



		    /*Enable Seconds Interrupt*/
		    RTC_IER |= (1<<4); //Seconds interrupt enable(Bit4=1)

		    /*Timer enable*/
		    RTC_SR |= (1<<4);//Time count enable(Bit 4=1)

		    /*Configure the timer seconds and alarm registers*/
		  //  RTC_TSR = 0xFF;

NVIC->ISER[0]=0X00200000;//ENABLE NVIC FOR TIMER INTERRUPT(BIT 21)


}
/*----------------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: UART IRQ handler

  Contains transmit and receive interrupt which gets triggered when UART_D register is full or empty

 @param: None


 @return: None

/*-------------------------------------------------------------------------------------------------------------------------------------*/
void RTC_Seconds_IRQHandler(){
	//uint8_t minutes,hours;

	 seconds=RTC_TSR;
	 START_CRITICAL();
	 UART_send(".");
	 END_CRITICAL();
}
/*---------------------------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: UART IRQ handler

  Contains transmit and receive interrupt which gets triggered when UART_D register is full or empty

 @param: None


 @return: None
 */
uint8_t h;
uint8_t *str=&h;

/*-----------------------------------------------------------------------------------------------------------------------------*/
void UART0_IRQHandler()
{
	if((UART0_S1 & 0x20)==0x20)
		{
			*pointer=UART0_D;	//Copy value of UART0_D register into a pointer
			if(*pointer!=0x1B)
			{
				CB_buffer_add_item(rx,*pointer);//Add the pointer value into circular buffer
				count++;
			}
			else
			{
				if(logging_enable)
					logging_enable=0;
				else
					logging_enable=1;
			}
		}
}
/*--------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: Send a single character from UART_D register to circular buffer

  This basically allows the value entered on putty/teraterm to get added into circular buffer

 @param: pointer to data that is to be sent


 @return: status whether transmit interrupt is activated
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
uint8_t UART_send(uint8_t *poin)
{
     uint8_t status;
    //Send the data into circular buffer
     {
    	while((UART0_S1 &0x80)!=0x80);
    	UART0_D=*poin;
     }
     return status;
}
/*--------------------------------------------------------------------------------------------------------------------------------*/

/*
  @brief: Receives data into memory location from UART0_D

  Given a value to putty/teraterm, it gets loaded into circular buffer from UART0_D if it gets full

 @param: pointer to location where value from UART0_D is to be stored.


 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
uint8_t UART_receive(uint8_t *loc)
{	//Receive the data from UART0_D register into pointer location
	if(loc)
	{
		*loc = UART0->D;
	}

}
/*-----------------------------------------------------------------------------------------------------------------------------------*/

/*
  @brief: Sends  a string of given length

  Given a string of specific length, it gets sent

 @param: Pointer to location which contains the string to be passed and length of the string


 @return: Returns status
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
uint8_t log_data(uint8_t *loc, uint8_t n)
{
	uint8_t status;
	uint8_t *poin=loc;
	//If pointer is NULL
	if(loc == NULL)
	{
		status = 0;
	}
	else
	{
		while(n!=0)
		{//Use UART_send function to send multiple character using while loop
			UART_send(loc);
			loc++;
			n--;
		}
	status=0;
	}
}
/*--------------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: Send string

  Given a string of data, it usually sends each of character to circular buffer

 @param: pointer to data string which is to be sent


 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
void log_string(uint8_t *loc)
{
	while(*loc)
	{	//Sends data until NULL character is detected
		UART_send(loc);
		loc++;
	}
}
/*--------------------------------------------------------------------------------------------------------------------------------*/

/*
  @brief: Receive a string from memory location which is stored in UART0_D register

  Given a string, the string is loaded into UART0_D register

 @param: Pointer to location from where string is input, length of string


 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/

uint8_t UART_receive_n(uint8_t *loc, uint8_t n)
{
	if(!loc)
	{	//Receives multiple character using receive function
		while(n!=0)
		{
				UART_receive(loc);
				loc++;
			n--;
		}
	}
}
/*--------------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: Converts a given number into its ASCII equivalent

  Function that performs integer to ascii conversion

 @param: Number that is to be converted into its ascii equivalent form


 @return: None
 */
/*------------------------------------------------------------------------------------------------------------------------------------*/
uint8_t log_integer(uint8_t num){
	uint8_t a;
	uint8_t *str=&a;
	uint8_t *ptr=my_itoa( num, *str,10);
	UART_send(ptr);
}
/*--------------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: Flushes the data which is present in the buffer

  Removes all the items from buffer

 @param: None


 @return: None
 */
/*------------------------------------------------------------------------------------------------------------------------------------*/
void log_flush()
{
	#ifdef LOGGING
	if(logging_enable)
	{
		log_string("\n\r");
		log_string("\n\rID	RTC	LOG_LENGTH	CHECKSUM	PAYLOAD				COUNTS\n\r");
	}
	#endif
	do
	{
		s1=CB_buffer__buffer_remove_item(tx, receivea);//Remove the value from circular buffer and move it into a pointer
		if(s1!=empty)
		{
			if(*receivea)
			{
				int i=*receivea-'0';
				my_itoa(LB_t[i].LOG_ID,str, 10);
				log_string(str);
				log_string("\t");
				while(!(UART0_S1 & 0x40));
				*str=0000;
				my_itoa(LB_t[i].timestamp,str, 10);
				log_string(str);
				log_string("\t");
				while(!(UART0_S1 & 0x40));
				*str=0000;
				my_itoa(LB_t[i].loglength,str, 10);
				log_string(str);
				log_string("\t");
				log_string("\t");
				while(!(UART0_S1 & 0x40));
				*str=0000;
				my_itoa(LB_t[i].checksum,str, 10);
				log_string(str);
				log_string("\t");
				log_string("\t");
				while(!(UART0_S1 & 0x40));
				*str=0000;
				log_string(LB_t[i].payload);
				//log_string("\t");
				while(!(UART0_S1 & 0x40));
				if(LB_t[i].count!=0)
				{
					log_string("\t");
					log_string("\t");
					my_itoa(LB_t[i].count,str, 10);
					log_string(str);
				}
				log_string("\n\r");
			}
		}
	}while(*receivea && s1!=empty);
}
/*-------------------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: Copies the content from set of memory location to another

  Copies content from source location to destination location of given length

 @param: Pointer to source
 @param: Pointer to destination
 @param: length of block which is to bve transferred


 @return: Pointer to source location
 /*------------------------------------------------------------------------------------------------------------------------------*/
uint8_t* my_memcpy(uint8_t *src,uint8_t *dst,size_t length){
int s=length;
// Copies block of memory from source to destination pointer without checking for overlap condition
while(length>0){
        *dst=*src;
        dst++;
        src++;
        length--;}
        int i=0;
        for(i=s;i>0;i--){
        dst--;}
        src=src-length;
        return(dst);
}
/*---------------------------------------------------------------------------------------------------------------------------------*/
/*
@brief: Adds item into the buffer

Given a buffer, add items into it(the enum values)

@param: Pointer to particular log
@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/
void log_item(uint8_t *logptr){
	//while(length!=0){
	while(*logptr){
	CB_buffer_add_item(tx,*logptr);
logptr++;
	}
}
/*---------------------------------------------------------------------------------------------------------------------------------*/
/*
@brief: Logs when logger buffer gets initialised

Displays a log message on putty when logger buffer gets initialised

@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/

void LOGGER_INITIALISED(){
	my_memcpy("ID:",LB_t[0].id,3);
	LB_t[0].LOG_ID=0x1;
	my_memcpy("TIME:", LB_t[0].Rtc,5);
	LB_t[0].timestamp=3;//RTC->TSR;
	my_memcpy("LENGTH:", LB_t[0].loglen,7);
	LB_t[0].loglength=17;
	my_memcpy("CHECKSUM:", LB_t[0].check,9);
	LB_t[0].checksum='L'^'O'^'G'^'G'^'E'^'R'^'I'^'N'^'T'^'I'^'L'^'I'^'S'^'D'^'0';//^LB_t[0].timestamp;
	my_memcpy("PAYLOAD:", LB_t[0].overhead,8);
	my_memcpy("LOGGER INITIALSED", LB_t[0].payload, 17);
#ifdef LOGGING
	if(logging_enable)
		log_item("0");
#endif

}
/*---------------------------------------------------------------------------------------------------------------------------------*/
/*
@brief: Logs when GPIO gets initialised

Displays a log message on putty when GPIO gets initialised

@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/
void GPIO_INITIALIZATION(){
	my_memcpy("ID:", LB_t[1].id,3);
	LB_t[1].LOG_ID=1;
	my_memcpy("TIME:",LB_t[1].Rtc,5);
	LB_t[1].timestamp=3;//RTC->TSR;
	my_memcpy("LENGTH:",LB_t[1].loglen,7);
	LB_t[1].loglength=17;
	my_memcpy("CHECKSUM:",LB_t[1].check,9);
	LB_t[1].checksum='G'^'P'^'I'^'O'^'I'^'N'^'I'^'T'^'I'^'A'^'L'^'I'^'S'^'E'^'D'^'1';//^LB_t[1].timestamp;
	my_memcpy("PAYLOAD:",LB_t[1].overhead,8);
	my_memcpy("GPIO INITIALISED",LB_t[1].payload,16);
#ifdef LOGGING
	if(logging_enable)
		log_item("1");
#endif
}
/*---------------------------------------------------------------------------------------------------------------------------------*/
/*
@brief: Logs when System gets initialised

Displays a log message on putty when System gets initialised

@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/
void SYSTEM_INITIALISED(){
		my_memcpy("ID:",LB_t[2].id,3);
		LB_t[2].LOG_ID=2;
		my_memcpy("TIME:", LB_t[2].Rtc,5);
		LB_t[2].timestamp=3;//RTC->TSR;
		my_memcpy("LENGTH:", LB_t[2].loglen,7);
		LB_t[2].loglength=17;
		my_memcpy("CHECKSUM:", LB_t[2].check,9);
		LB_t[2].checksum='S'^'Y'^'S'^'T'^'E'^'M'^'I'^'N'^'T'^'I'^'L'^'I'^'S'^'D'^'2';//^LB_t[2].timestamp;
		my_memcpy("PAYLOAD:", LB_t[2].overhead,8);
		my_memcpy("SYSTEM INITIALISED",LB_t[2].payload,18);
#ifdef LOGGING
		if(logging_enable)
			log_item("2");
#endif
}
/*---------------------------------------------------------------------------------------------------------------------------------*/
/*
@brief: Logs when profiling starts

Displays a log message on putty when profiling starts

@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/
void PROFILING_STARTED(){
		my_memcpy("ID:",LB_t[3].id,3);
		LB_t[3].LOG_ID=3;
		my_memcpy("TIME:", LB_t[3].Rtc,5);
		LB_t[3].timestamp=3;//RTC->TSR;
		my_memcpy("LENGTH:", LB_t[3].loglen,7);
		LB_t[3].loglength=17;
		my_memcpy("CHECKSUM:", LB_t[3].check,9);
		LB_t[3].checksum='P'^'R'^'O'^'F'^'I'^'L'^'I'^'N'^'G'^'S'^'T'^'A'^'R'^'T'^'E'^'D'^'3';//^LB_t[3].timestamp;
		my_memcpy("PAYLOAD:", LB_t[3].overhead,8);
		my_memcpy("PROFILING STARTED",LB_t[3].payload,17);
#ifdef LOGGING
		if(logging_enable)
			log_item("3");
#endif

}
/*---------------------------------------------------------------------------------------------------------------------------------*/
/*
@brief: Logs when profiling gets completed

Displays a log message on putty when profiling gets completed

@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/
void PROFILING_COMPLETED(){
	my_memcpy("ID:",LB_t[4].id,3);
		LB_t[4].LOG_ID=4;
		my_memcpy("TIME:", LB_t[4].Rtc,5);
		LB_t[4].timestamp=3;//RTC->TSR;
		my_memcpy("LENGTH:", LB_t[4].loglen,7);
		LB_t[4].loglength=17;
		my_memcpy("CHECKSUM:", LB_t[4].check,9);
		LB_t[4].checksum='P'^'R'^'O'^'F'^'I'^'L'^'I'^'N'^'G'^'C'^'O'^'M'^'P'^'L'^'E'^'T'^'E'^'D'^'4';//^LB_t[4].timestamp;
		my_memcpy("PAYLOAD:", LB_t[4].overhead,8);
		my_memcpy("PROFILING COMPLETED", LB_t[4].payload,19);
#ifdef LOGGING
		if(logging_enable)
			log_item("4");
#endif
}
/*---------------------------------------------------------------------------------------------------------------------------------*/
/*
@brief: Logs when profiling result is calculated

Displays a log message on putty when profiling result gets calculated

@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/
void PROFILING_RESULT(){
		my_memcpy("ID:",LB_t[5].id,3);
		LB_t[5].LOG_ID=5;
		my_memcpy("TIME:", LB_t[5].Rtc,5);
		LB_t[5].timestamp=3;//RTC->TSR;
		my_memcpy("LENGTH:", LB_t[5].loglen,7);
		LB_t[5].loglength=17;
		my_memcpy("CHECKSUM:", LB_t[5].check,9);
		LB_t[5].checksum='P'^'R'^'O'^'F'^'I'^'L'^'I'^'N'^'G'^'R'^'E'^'S'^'U'^'L'^'T'^'5';//^LB_t[5].timestamp;
		my_memcpy("PAYLOAD:", LB_t[5].overhead,8);
		my_memcpy("PROFILING RESULT",LB_t[5].payload,16);
		//LB_t.count='\0';
		my_memcpy("TICKS:", LB_t[5].ticks,6);
		LB_t[5].count=58; //*(my_itoa(89,str,10));
#ifdef LOGGING
		if(logging_enable)
			log_item("5");
#endif
}
/*---------------------------------------------------------------------------------------------------------------------------------*/
/*
@brief: Logs when data analysis is started

Displays a log message on putty when data analysis starts

@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/
void DATA_ANALYSIS_STARTED(){
		my_memcpy("ID:",LB_t[6].id,3);
		LB_t[6].LOG_ID=6;
		my_memcpy("TIME:", LB_t[6].Rtc,5);
		LB_t[6].timestamp=3;//RTC->TSR;
		my_memcpy("LENGTH:", LB_t[6].loglen,7);
		LB_t[6].loglength=17;
		my_memcpy("CHECKSUM:", LB_t[6].check,9);
		LB_t[6].checksum='D'^'A'^'T'^'A'^'A'^'N'^'A'^'L'^'Y'^'S'^'I'^'S'^'S'^'T'^'A'^'R'^'T'^'E'^'D'^'6';//^LB_t[6].timestamp;
		my_memcpy("PAYLOAD:", LB_t[6].overhead,8);
		my_memcpy("DATA ANALYSIS STARTED",LB_t[6].payload,21);
#ifdef LOGGING
		if(logging_enable)
			log_item("6");
#endif
}
/*---------------------------------------------------------------------------------------------------------------------------------*/
/*
@brief: Logs when alphabetic count is computed

Displays a log message on putty when alphabetic count is computed

@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/
void DATA_ALPHA_COUNT()
{
	my_memcpy("ID:",LB_t[7].id,3);
	LB_t[7].LOG_ID=7;
			my_memcpy("TIME:", LB_t[7].Rtc,5);
			LB_t[7].timestamp=3;//RTC->TSR;
			my_memcpy("LENGTH:", LB_t[7].loglen,7);
			LB_t[7].loglength=17;
			my_memcpy("CHECKSUM:", LB_t[7].check,9);

			my_memcpy("PAYLOAD:", LB_t[7].overhead,8);
			my_memcpy("ALPHABETIC COUNT",LB_t[7].payload,16);
			LB_t[7].count = alphacount;
			LB_t[7].checksum='D'^'A'^'T'^'A'^'A'^'L'^'P'^'H'^'A'^'C'^'O'^'U'^'N'^'T'^'7'^LB_t[7].count;//^LB_t[7].timestamp;
#ifdef LOGGING
			if(logging_enable)
				log_item("7");
#endif
}
/*---------------------------------------------------------------------------------------------------------------------------------*/
/*
@brief: Logs when numeric count is computed

Displays a log message on putty when numeric count is calculated

@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/
void DATA_NUMERIC_COUNT()
{
	my_memcpy("ID:",LB_t[8].id,3);
	LB_t[8].LOG_ID=8;
			my_memcpy("TIME:", LB_t[8].Rtc,5);
			LB_t[8].timestamp=3;//RTC->TSR;
			my_memcpy("LENGTH:", LB_t[8].loglen,7);
			LB_t[8].loglength=17;
			my_memcpy("CHECKSUM:", LB_t[8].check,9);
			my_memcpy("PAYLOAD:", LB_t[8].overhead,8);
			my_memcpy("NUMERIC COUNT\t",LB_t[8].payload,14);
			LB_t[8].count = numericcount;
			LB_t[8].checksum='D'^'A'^'T'^'A'^'N'^'U'^'M'^'E'^'R'^'I'^'C'^'C'^'O'^'U'^'N'^'T'^'8'^LB_t[8].count;//^LB_t[8].timestamp;
#ifdef LOGGING
			if(logging_enable)
				log_item("8");
#endif
}
/*---------------------------------------------------------------------------------------------------------------------------------*/
/*
@brief: Logs when punctuation count is computed

Displays a log message on putty when punctuation count is computed

@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/
void DATA_PUNCTUATION_COUNT()
{
	my_memcpy("ID:",LB_t[9].id,3);
	LB_t[9].LOG_ID=9;
			my_memcpy("TIME:", LB_t[9].Rtc,5);
			LB_t[9].timestamp=3;//RTC->TSR;
			my_memcpy("LENGTH:", LB_t[9].loglen,7);
			LB_t[9].loglength=17;
			my_memcpy("CHECKSUM:", LB_t[9].check,9);
			my_memcpy("PAYLOAD:", LB_t[9].overhead,8);
			my_memcpy("PUNCTUATION COUNT",LB_t[9].payload,17);
			LB_t[9].count = punctuationcount;
			LB_t[9].checksum='D'^'A'^'T'^'A'^'P'^'U'^'N'^'C'^'T'^'U'^'A'^'T'^'I'^'O'^'N'^'C'^'O'^'U'^'N'^'T'^'9'^LB_t[9].count;//^LB_t[9].timestamp;
#ifdef LOGGING
			if(logging_enable)
				log_item("9");
#endif
}
/*---------------------------------------------------------------------------------------------------------------------------------*/
/*
@brief: Logs when data analysis gets completed

Displays a log message on putty when data analysis gets completed

@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/
void DATA_ANALYSIS_COMPLETED(){
		my_memcpy("ID:",LB_t[10].id,3);
		LB_t[10].LOG_ID=10;
		my_memcpy("TIME:", LB_t[10].Rtc,5);
		LB_t[10].timestamp=3;//RTC->TSR;
		my_memcpy("LENGTH:", LB_t[10].loglen,7);
		LB_t[10].loglength=17;
		my_memcpy("CHECKSUM:", LB_t[10].check,9);
		LB_t[10].checksum='D'^'A'^'T'^'A'^'A'^'N'^'A'^'L'^'Y'^'S'^'I'^'S'^'C'^'O'^'M'^'P'^'L'^'E'^'T'^'E'^'D'^'10';//^LB_t[10].timestamp;
		my_memcpy("PAYLOAD:", LB_t[10].overhead,8);
		my_memcpy("DATA ANALYSIS COMPLETED",LB_t[10].payload,23);
#ifdef LOGGING
		if(logging_enable)
			log_item("10");
#endif
}

////////////////////////////////////////////////////////////////////////////////
// EOF
////////////////////////////////////////////////////////////////////////////////
