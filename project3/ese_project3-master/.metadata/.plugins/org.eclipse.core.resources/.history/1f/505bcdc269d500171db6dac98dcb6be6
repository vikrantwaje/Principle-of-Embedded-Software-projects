/*
 * Copyright (c) 2015, Freescale Semiconductor, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*
 * Copyright (c) 2015, Freescale Semiconductor, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*-----------------------------------------------------------------------------------------------------------------------------------*/
 /* 0.Documentation section
  -----------------------------------------------------------------------------------------------------------------------------------

  @file-main.c

 @brief:This file includes profiling function to calculate the number of cycles used by the code

 @author: Vikrant Waje

 @date:24 November 2017


 */
/*--------------------------------------------------------------------------------------------------------------------------------*/
/*1. Preprocessor Directives*/

#include "MKL25Z4.h"
#include<stdint.h>

static uint64_t overflow=0;
uint32_t start,end,elapsed;
float profile;
/*---------------------------------------------------------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief:IRQ handler for TPM module

  This handler gets invoked every 50 msec

 @param:None


 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
void UART0_IRQHandler()
{
	// If UART0_D register gets full,receive interrupt gets activated
	if((UART0_S1 & 0x20)==0x20)
	{
		*pointer=UART0_D;	//Copy value of UART0_D register into a pointer
		if(*pointer!=0x1B)
		{
			CB_buffer_add_item(tx,*pointer);//Add the pointer value into circular buffer
			//countbackup++;
			//UART0_C2&=~(0X80);
		}
	}
	//If UART0_D register becomes empty, transmit interrupt gets activated
	else if((UART0_C2 & 0x80)==0x80)
	{
		s1=CB_buffer__buffer_remove_item( rx, receivea);//Remove the value from circular buffer and move it into a pointer
		if(s1!=empty)
		{
			UART0_D=*receivea; //Store the value of pointer into UART0_D register
			//UART0_D = *loc;
			UART0_C2 &= 0x7F; //Disable the trasnmit interrupt
			while(!(UART0_S1 & 0x40)); //Wait until all bits are sent

		}
	}
}

/*-----------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief:Initialises TPM module(Peripheral)

  This routines sets the MOD values, prescalar and enables timer interrupt

 @param:None


 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
void UART_configure()
{
	end =SysTick->VAL;
	elapsed=overflow*(SysTick->LOAD)+((SysTick->LOAD)-end);
	profile=(float)elapsed*(float)((float)(1)/(float)(DEFAULT_SYSTEM_CLOCK));
	uint16_t baud_divisor;
	SIM_SCGC4 |= 0x00000400;            // enable clock for UART(10th bit in SCGC5)
	SIM_SOPT2 |= 0x04000000;            // use FLL output for UART(Bit 27th and 26th)
	UART0_C2 &= 0XF3;              // Disable transmit and receive pin(Bit 2nd and Bit 3rd of C2)
	/*---------------------BAUD RATE-----------------------------------------------*/

	/* BAUD RATE=(SYSTEM CLOCK)/((OSR+1)*SBR)
	 * ASSUME THAT WE WANT BAUD RATE TO 38400
	 * SYSTEM CLOCK =20.9MHz
	 * OSR=3
	 * SBR=312
	 * BAUD RATE WITH ABOVE VALUES WILL COME OUT TO 38467.5 WHICH IS CLOSE TO OUR REQUIRED BAUD RATE THAT IS 38400
	 *
	 */
	baud_divisor= (uint16_t)(DEFAULT_SYSTEM_CLOCK/(baud *16));// Get the value of SBR to be loaded into BDH and BDL register
	UART0_BDH |= (baud_divisor >> 8) & 0x1F; //ANDED with 0x1F because BDH lies from Bit 0 Bit 4
	UART0_BDL = (baud_divisor & 0XFF);	//ANDED with 0xFF because BDL lies from bit 0 to bit 7
	//UART0_BDH = 0x00;             // Select BAUD rate as 38400(Bit 0 to bit 4 of BDH)
	//UART0_BDL = 0x22;            // Select BAUD rate as 38400(Bit 0 to Bit 7 of BDL)
	UART0_C4 = 0x0F;              // Over Sampling Ratio 16(Set OSR to 15)
	UART0_C1 = 0x00000000;              // Select 8-bit mode
	UART0_C2 |= 0X2C;              // enable transmit and receive pins(Bit 2nd and Bit 3rd of C2)
    SIM_SCGC5 |= 0x00000200;            // enable clock for PORTA(Bit 9th in SCGC5)
    PORTA_PCR1 = 0x00000200;            // Select PTA1 as Receive pin
    PORTA_PCR2 = 0x00000200;            // Select PTA2 as Transmit pin


	/*-----------------------------ENABLING INTERRUPT-------------------------------------*/

	NVIC->ISER[0]=0X00001000;//ENABLE INTERRUPT WHICH IS BIT 12 IN ISER REGISTER(IRQ 12 CORRESPONDS TO UART0 INTERRUPT)*/
}

/*
  @brief:IRQ handler for Systick timer operations

  This handler gets invoked when a underflow occurs(transition from 1 to zero)

 @param:None


 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
void SysTick_Handler(){

overflow=overflow+1;

}
/*---------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: Initialise Systick timer

  Configuring various registers of Systick timer along with its MOD register

 @param:None


 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
void SysTick_init(){

	SysTick->CTRL=0; //Disable Systick
	/*formula:
	 * Reload value=(System frequency)/(Required frequency)
	 */
	SysTick->LOAD=16777215; // Corresponding to maximum count of 24 bit counter
	SysTick->VAL=0x00000000;; // Current value=0

}

int main(void)
{
UART_configure();


/************************************************/
SysTick_init(); //start counting
SysTick->CTRL=0x7; // Enable interrupt, processor clock,start counting.
	UART0_C2 |= 0x00000080;


/***********************************************************/




}
////////////////////////////////////////////////////////////////////////////////
// EOF
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// EOF
////////////////////////////////////////////////////////////////////////////////
