/*
 * Copyright (c) 2015, Freescale Semiconductor, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*-----------------------------------------------------------------------------------------------------------------------------------*/
 /* 0.Documentation section
  -----------------------------------------------------------------------------------------------------------------------------------

  @file-dma.c

 @brief:This file includes dma operations like memset,memzero and memmove

 @author: Vikrant Waje and Kiran Hegde

 @date:20 November 2017


 */
/*--------------------------------------------------------------------------------------------------------------------------------*/
/*1. Preprocessor Directives*/
#include "MKL25Z4.h"
#include<stdint.h>
#include<stddef.h>

#define TRANSFER (8)// Sets the number of bytes to be transferred
#define LENGTH (20)// Block of data to be transferred
#define SETVALUE (5) //This value is used is memset function
/*----------------------------------------------------------------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: Memory move

  Given a set of memory location, copy that block of memory from source to destination with handling overlap

 @param: Source pointer, destination pointer, length of memory block which is to be moved


 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/

	void my_memmove(uint8_t *src,uint8_t *dst,uint8_t length){
		if(dst>src){
		    ptrdiff_t diff = src+length-dst;
		    src=src+diff;
		    dst=dst+diff;
		    SIM_SOPT2|=0X00010000; // Select PLL/2


		    	SIM_SCGC7=0X00000100; //Enable clock to DMA module

		    	/*-------------------------------------------*/
		    	//Set control register
		    	DMA_DCR0=(1<<31);//Enable interrupt on complete
		    	DMA_DCR0|=(1<<22); // Increments source address on each transfer of data(depends on size)
		    	DMA_DCR0|=(1<<19); // Increments destination address after transfer is complete(depends on size)

		    	#ifdef TRANSFER
		    	#if (TRANSFER==8)
		    	#define x (1)
		    	#elif (TRANSFER==16)
		    	#define x (2)
		    	#else
		    	#define x (0)
		    	#endif
		    	#endif

		    	DMA_DCR0|=DMA_DCR_SSIZE(x);// 8 bit size(bit 20-21)
		    	DMA_DCR0|=DMA_DCR_DSIZE(x);// 8 bit size(bit 17-18)


		    	/*--------------------------------------------*/

		    	DMA_SAR0=src; //Set source address()
		    	DMA_DAR0=dst ;//Set Destination address()
		    	DMA_DSR_BCR0=length-diff; //No. of bytes to be transferred
		    	DMA_DSR_BCR0 &=~(0x01000000); // Clear DONE bit in BCR0(BIT 24)
		        DMA_DCR0|=0x00010000; // Start transfer by setting start bit(bit 16)

		        NVIC->ISER[0]=0X00000001;
/*---------------------------------------------------------------------------------------------------------*/
		        src=src-diff;
		        dst=dst-diff;
		        diff=diff;

		    	DMA_DCR0|=DMA_DCR_SSIZE(x);// 8 bit size(bit 20-21)
		    	DMA_DCR0|=DMA_DCR_DSIZE(x);// 8 bit size(bit 17-18)


		    	/*--------------------------------------------*/

		    	DMA_SAR0=src; //Set source address()
		    	DMA_DAR0=dst ;//Set Destination address()
		    	DMA_DSR_BCR0=diff; //No. of bytes to be transferred
		    	DMA_DSR_BCR0 &=~(0x01000000); // Clear DONE bit in BCR0(BIT 24)
		        DMA_DCR0|=0x00010000; // Start transfer by setting start bit(bit 16)

		        NVIC->ISER[0]=0X00000001;


		}
		else{
			SIM_SOPT2|=0X00010000; // Select PLL/2


					    	SIM_SCGC7=0X00000100; //Enable clock to DMA module

					    	/*-------------------------------------------*/
					    	//Set control register
					    	DMA_DCR0=(1<<31);//Enable interrupt on complete
					    	DMA_DCR0|=(1<<22); // Increments source address on each transfer of data(depends on size)
					    	DMA_DCR0|=(1<<19); // Increments destination address after transfer is complete(depends on size)

					    	#ifdef TRANSFER
					    	#if (TRANSFER==8)
					    	#define x (1)
					    	#elif (TRANSFER==16)
					    	#define x (2)
					    	#else
					    	#define x (0)
					    	#endif
					    	#endif

					    	DMA_DCR0|=DMA_DCR_SSIZE(x);// 8 bit size(bit 20-21)
					    	DMA_DCR0|=DMA_DCR_DSIZE(x);// 8 bit size(bit 17-18)


					    	/*--------------------------------------------*/

					    	DMA_SAR0=src; //Set source address()
					    	DMA_DAR0=dst ;//Set Destination address()
					    	DMA_DSR_BCR0=length; //No. of bytes to be transferred
					    	DMA_DSR_BCR0 &=~(0x01000000); // Clear DONE bit in BCR0(BIT 24)
					        DMA_DCR0|=0x00010000; // Start transfer by setting start bit(bit 16)

					        NVIC->ISER[0]=0X00000001;


		}


}
	/*---------------------------------------------------------------------------------------------------------------------------*/
	/*
	  @brief: Memory set

	  Given a integer value, set the given block of memory location with that value

	 @param: Memory value that is to be set


	 @return: None
	 */
	/*-----------------------------------------------------------------------------------------------------------------------------*/

void mem_set(uint8_t value){
	uint8_t a;
	uint8_t array[1];

		array[0]=value;

	SIM_SOPT2|=0X00010000; // Select PLL/2


	SIM_SCGC7=0X00000100; //Enable clock to DMA module

	/*-------------------------------------------*/
	//Set control register
	DMA_DCR0=(1<<31);//Enable interrupt on complete
	DMA_DCR0|=(0<<22); // Increments source address on each transfer of data(depends on size)
	DMA_DCR0|=(1<<19); // Increments destination address after transfer is complete(depends on size)

	#ifdef TRANSFER
	#if (TRANSFER==8)
	#define x (1)
	#elif (TRANSFER==16)
	#define x (2)
	#else
	#define x (0)
	#endif
	#endif

	DMA_DCR0|=DMA_DCR_SSIZE(x);// 8 bit size(bit 20-21)
	DMA_DCR0|=DMA_DCR_DSIZE(x);// 8 bit size(bit 17-18)


	/*--------------------------------------------*/

	DMA_SAR0=array; //Set source address()
	DMA_DAR0=0X20000000 ;//Set Destination address()
	DMA_DSR_BCR0=20; //No. of bytes to be transferred
	DMA_DSR_BCR0 &=~(0x01000000); // Clear DONE bit in BCR0(BIT 24)
    DMA_DCR0|=0x00010000; // Start transfer by setting start bit(bit 16)

    NVIC->ISER[0]=0X00000001;


}
/*---------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: Memory zero

  Given a block of memory ,reset each of the memory location

 @param:None


 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/

void mem_zero(){
	uint8_t a;
	uint8_t array[1];
array[0]=0;

	SIM_SOPT2|=0X00010000; // Select PLL/2


	SIM_SCGC7=0X00000100; //Enable clock to DMA module

	/*-------------------------------------------*/
	//Set control register
	DMA_DCR0=(1<<31);//Enable interrupt on complete
	DMA_DCR0&=~(1<<22); // Increments source address on each transfer of data(depends on size)
	DMA_DCR0|=(1<<19); // Increments destination address after transfer is complete(depends on size)

	#ifdef TRANSFER
	#if (TRANSFER==8)
	#define x (1)
	#elif (TRANSFER==16)
	#define x (2)
	#else
	#define x (0)
	#endif
	#endif

	DMA_DCR0|=DMA_DCR_SSIZE(x);// 8 bit size(bit 20-21)
	DMA_DCR0|=DMA_DCR_DSIZE(x);// 8 bit size(bit 17-18)


	/*--------------------------------------------*/

	DMA_SAR0=array; //Set source address()
	DMA_DAR0=0X20000000 ;//Set Destination address()
	DMA_DSR_BCR0=20; //No. of bytes to be transferred
	DMA_DSR_BCR0 &=~(0x01000000); // Clear DONE bit in BCR0(BIT 24)
    DMA_DCR0|=0x00010000; // Start transfer by setting start bit(bit 16)

    NVIC->ISER[0]=0X00000001;


}

/*---------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief:IRQ handler for DMA operations

  When the specified  block of memory is being transfered, this IRQ handler gets invoked

 @param:None


 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
void DMA0_IRQHandler(){


DMA_DSR_BCR0|=(1<<24); //SETS DONE BIT(BIT 24)


}



void main(){


uint32_t i;
uint8_t array[1];
uint8_t array1[1];
array[0]=5;
uint8_t *src=&array;
uint8_t *dst=&array1;
for(i=0;i<4999;i++){
	*(src+i)=i;

}
my_memmove(src,dst,20);



}
////////////////////////////////////////////////////////////////////////////////
// EOF
////////////////////////////////////////////////////////////////////////////////
