/*
 /*-----------------------------------------------------------------------------------------------------------------------------------*/
 /* 0.Documentation section
  -----------------------------------------------------------------------------------------------------------------------------------

  @file-project2.c

 @brief:This file intilises all the buffers, generates buffer report and
 	 	- takes care of displaying required elements through UART.

 @author: Vikrant Waje and Kiran Hegde

 @date:29 October 2017


 */
/*--------------------------------------------------------------------------------------------------------------------------------*/
/*1. Preprocessor Directives*/

#include "MKL25Z4.h"
#include<stdint.h>
#include<stdio.h>
#include<stdlib.h>
#include"uart.h"
#include"cb.h"
#include "project2.h"

/*---------------------------------------------------------------------------------------------------------------------*/
/* Global declaration */
uint8_t ki;
uint8_t *pointer=&ki;
CB_t *tx;
CB_t *rx;
uint8_t  *loc;
uint8_t c;
uint8_t f;
uint8_t alphacount=0;
uint8_t numericcount=0;
uint8_t count=0;
uint8_t b;
uint8_t *receive=&b;
uint8_t s1=10;
uint8_t s2=10;
uint8_t e;
uint8_t *receivea=&e;
/*---------------------------------------------------------------------------------------------------------------------*/

/* Function declaration */
/*
  @brief: Calling of all initialise function and displaying the report

  This function calls all the initialization functions and takes care of displaying the required
  elements on the serial terminal

 @param: None

 @return: None
 */

/*----------------------------------------------------------------------------------------------------------------------------*/
void project2()
{
	tx=malloc(sizeof(CB_t));
		rx=malloc(sizeof(CB_t));
		uint8_t y;
		uint8_t* loc=&y;
		CB_init(tx,18);					/*Initialing the circular buffer for storing character*/
		//CB_init(rx,9);					/*Initialising the buffer for transmitting character to terminal*/
		UART_configure();
		CB_buffer_add_item(tx,'L');/* Configuring UART*/
		CB_buffer__buffer_remove_item(tx,loc);
		UART0_D=*loc;
	//	while((UART0_C2 & 0x80)!=0x80);
		UART_send(*loc);
}

////////////////////////////////////////////////////////////////////////////////
// EOF
////////////////////////////////////////////////////////////////////////////////




