/*
ss * Copyright (c) 2015, Freescale Semiconductor, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*-----------------------------------------------------------------------------------------------------------------------------------*/
 /* 0.Documentation section
  -----------------------------------------------------------------------------------------------------------------------------------

  @file-profiler.c

 @brief:This file includes profiling function to calculate the number of cycles used by the code

 @author: Vikrant Waje and Kiran Hegde

 @date:22 November 2017


 */
/*--------------------------------------------------------------------------------------------------------------------------------*/
/*1. Preprocessor Directives*/

#include "MKL25Z4.h"
#include<stdint.h>

 uint32_t overflow=0;
 uint8_t* my_memmove(uint8_t *src,uint8_t *dst,size_t length)__attribute__((optimize(3)));
/*---------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief:IRQ handler for Systick timer operations

  This handler gets invoked when a underflow occurs(transition from 1 to zero)

 @param:None


 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
void SysTick_Handler(){

overflow=overflow+1;
	  // GPIOB_PTOR|=(1<<19);

}

uint8_t* my_memmove(uint8_t *src,uint8_t *dst,size_t length){
int s=length;
//uint8_t *backup=&a;
if(dst>src){

dst=dst+s-1;
src=src+s-1;
while(length>0){
        *dst=*src;

        dst--;
        src--;
        length--;}

}
else if(src>dst){


while(length>0){
        *dst=*src;

        dst++;
        src++;
        length--;}

}



        return(dst);
}
/*---------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: Initialise Systick timer

  Configuring various registers of Systick timer along with its MOD register

 @param:None


 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
void SysTick_init(){

	SysTick->CTRL=0; //Disable Systick
	/*formula:
	 * Reload value=(System frequency)/(Required frequency)
	 */
	SysTick->LOAD=16777215; // Corresponding to 50 ms delay
	SysTick->VAL=0; // Current value=0
	SysTick->CTRL=0x7; // Enable interrupt, processor clock,start counting.
}

int main(void)
{
	uint8_t array1[5000];
	uint8_t array2[5000];
	uint32_t end,elapsed;
	float profile;
	SystemCoreClockUpdate();
//led_init();
SysTick_init(); //start counting

/************************************************/
my_memzero(array2,array1,5000);

/***********************************************************/
end =SysTick->VAL;
elapsed=overflow*(SysTick->LOAD)+((SysTick->LOAD)-end);
profile=(float)elapsed*(float)((float)(1)/(float)(DEFAULT_SYSTEM_CLOCK));
uint8_t s=5;


}
////////////////////////////////////////////////////////////////////////////////
// EOF
////////////////////////////////////////////////////////////////////////////////
