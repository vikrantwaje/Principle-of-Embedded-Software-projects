/*
 * Copyright (c) 2015, Freescale Semiconductor, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/*-----------------------------------------------------------------------------------------------------------------------------------*/
 /* 0.Documentation section
  -----------------------------------------------------------------------------------------------------------------------------------

  @file-dma.c

 @brief:This file includes dma operations like memset,memzero and memmove

 @author: Vikrant Waje and Kiran Hegde

 @date:20 November 2017


 */
/*--------------------------------------------------------------------------------------------------------------------------------*/
/*1. Preprocessor Directives*/
#include "MKL25Z4.h"
#include<stdint.h>
#include<stddef.h>

#define TRANSFER (8)// Sets the number of bytes to be transferred
#define LENGTH (20)// Block of data to be transferred
#define SETVALUE (5) //This value is used is memset function

/*---------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief: Memory move

  Given a set of memory location, copy that block of memory from source to destination with handling overlap

 @param: Source pointer, destination pointer, length of memory block which is to be moved


 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/

	void DMA_init(){

		SIM_SOPT2|=0X00010000; // Select PLL/2


		SIM_SCGC7=0X00000100; //Enable clock to DMA module
		DMAMUX0_CHCFG0 = 0x00;
		/*-------------------------------------------*/
		//Set control register
		//DMA_DCR0=(1<<31);//Enable interrupt on complete
		//DMA_DCR0&=~(1<<22); // Increments source address on each transfer of data(depends on size)
		//DMA_DCR0|=(1<<19); // Increments destination address after transfer is complete(depends on size)

		#ifdef TRANSFER
		#if (TRANSFER==8)
		#define x (1)
		#elif (TRANSFER==16)
		#define x (2)
		#else
		#define x (0)
		#endif
		#endif
		DMA_DCR0 |= (DMA_DCR_SSIZE(1)
		                   | DMA_DCR_DSIZE(1)
		                   | DMA_DCR_D_REQ_MASK
		                   | DMA_DCR_DINC_MASK
		                   | DMA_DCR_CS_MASK
		                   | DMA_DCR_ERQ_MASK
						   | DMA_DCR_EINT_MASK
						   | DMA_DCR_EADREQ_MASK);


		/*--------------------------------------------*/

		DMA_SAR0=0x4006A007; //Set source address()(UART0)
		DMA_DAR0=0x20000000 ;//Set Destination address()(MEMORY LOCATION)
		DMA_DSR_BCR0=8; //No. of bytes to be transferred
		DMA_DSR_BCR0 &=~(0x01000000); // Clear DONE bit in BCR0(BIT 24)
	    DMA_DCR0|=0x00010000; // Start transfer by setting start bit(bit 16)

	    DMAMUX0_CHCFG0 = 0x02; //DMAMUX_CHCFG_ENBL_MASK|DMAMUX_CHCFG_SOURCE(0x31); //0xb1;
	         DMAMUX0_CHCFG0 |= DMAMUX_CHCFG_ENBL_MASK;

	    NVIC->ISER[0]=0X00000001;


		}





/*---------------------------------------------------------------------------------------------------------------------------*/
/*
  @brief:IRQ handler for DMA operations

  When the specified  block of memory is being transfered, this IRQ handler gets invoked

 @param:None


 @return: None
 */
/*-----------------------------------------------------------------------------------------------------------------------------*/
void DMA0_IRQHandler(){


DMA_DSR_BCR0|=(1<<24); //SETS DONE BIT(BIT 24)


}


////////////////////////////////////////////////////////////////////////////////
// EOF
////////////////////////////////////////////////////////////////////////////////
