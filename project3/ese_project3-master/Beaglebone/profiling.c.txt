/*
 * Copyright (c) 2015, Freescale Semiconductor, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 /*-----------------------------------------------------------------------------------------------------------------------------------*/
 /* 0.Documentation section
  -----------------------------------------------------------------------------------------------------------------------------------

  @file-profiling.c

 @brief:This file includes profiling code for beaglebone black

 @author: Vikrant Waje and Kiran Hegde

 @date:26 November 2017


 */
/*--------------------------------------------------------------------------------------------------------------------------------*/
//1. Preprocessor directives
#include<stdio.h>
#include<stdint.h>
#include<time.h>
#include<string.h>



//2. Function declaration
int8_t *my_memmove(uint8_t *src,uint8_t *dst,size_t length)__attribute__((optimize(3)));
/*--------------------------------------------------------------------------------------------*/
/*@brief: Memmory move function on which profiling is to be tested

Copies content from source to destination location

@param: None
@param: None


@return: None

/*---------------------------------------------------------------------------------------------------------------------------------*/
int8_t *  my_memmove(uint8_t *src,uint8_t *dst,size_t length)

{
int s=length;
//uint8_t *backup=&a;
if(dst>src){

dst=dst+s-1;
src=src+s-1;
while(length>0){
        *dst=*src;

        dst--;
        src--;
        length--;}

}
else if(src>dst){


while(length>0){
        *dst=*src;

        dst++;
        src++;
        length--;}

}



        return(dst);
}
/*--------------------------------------------------------------------------------------------------------------------------------------------*/
/*@brief:  Main function that contains the profiling function

calculates the time required for particular piece of code

@param: None
@param: None


@return: None

/*------------------------------------------------------------------------------------------------------------*/
void main(){
uint64_t start,end;
uint8_t a,b;
char source[5000];
char dest[5000];
uint64_t j=0;
for(j=0;j<10000;j++){
source[j]=j;
}
start=clock();
my_memmove(dest,source,5000);

end=clock();
printf("%f",(double)((end-start)*1000000)/CLOCKS_PER_SEC);
}